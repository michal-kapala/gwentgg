package profile

import (
  "gwentgg/components/colors"
  "gwentgg/components/fonts"
  "gwentgg/db/models"
	"gwentgg/enums"
	"gwentgg/utils"
)

css resultAccentWrapper() {
  border-radius: 4px 0px 0px 4px;
  width: 6px;
}

templ ResultAccent(game *models.Game, player *models.GamePlayer) {
  switch game.Finished {
    case enums.Draw:
      <div class={ resultAccentWrapper(), colors.BackgroundBrown() }></div>
    case enums.NotStarted:
      <div class={ resultAccentWrapper(), colors.BackgroundGray() }></div>
    case enums.Win:
      if *game.Winner == player.PlayerID {
        <div class={ resultAccentWrapper(), colors.BackgroundGreen() }></div>
      } else {
        <div class={ resultAccentWrapper(), colors.BackgroundRed() }></div>
      }
  }
}

templ GameType(game *models.Game, player *models.GamePlayer) {
  switch game.Finished {
    case enums.Draw:
      <span class={ colors.HighlightBrown() }>{ game.Type.GameMode() }</span>
    case enums.NotStarted:
      <span class={ colors.HighlightGray() }>{ game.Type.GameMode() }</span>
    case enums.Win:
      if *game.Winner == player.PlayerID {
        <span class={ colors.HighlightGreen() }>{ game.Type.GameMode() }</span>
      } else {
        <span class={ colors.HighlightRed() }>{ game.Type.GameMode() }</span>
      }
  }
}

css relativeGameDateWrapper() {
  font-size: 13px;
  margin-top: 4px;
}

templ RelativeGameDate(game *models.Game) {
  <span class={ relativeGameDateWrapper() }>{ utils.RelativeTime(game.DateFinished) }</span>
}

css generalGameInfoWrapper() {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: 0px 8px;
  min-width: 80px;
}

templ GeneralGameInfo(game *models.Game, player *models.GamePlayer) {
  if game.Finished == enums.Win && *game.Winner == player.PlayerID {
    <div class={ generalGameInfoWrapper(), fonts.FontRegular(), colors.HighlightGrayVeryLight() }>
      @GameType(game, player)
      @RelativeGameDate(game)
    </div>
  } else {
    <div class={ generalGameInfoWrapper(), fonts.FontRegular(), colors.HighlightGrayLight() }>
      @GameType(game, player)
      @RelativeGameDate(game)
    </div>
  }
}

css gameInfoWrapper() {
  display: flex;
  flex-direction: row;
  width: 100%;
  border-radius: 0px 4px 4px 0px;
}

templ GameInfo(game *models.Game, player *models.GamePlayer) {
  switch game.Finished {
    case enums.Draw:
      <div class={ gameInfoWrapper(), colors.BackgroundDarkBrown() }>
        @GeneralGameInfo(game, player)
      </div>
    case enums.NotStarted:
      <div class={ gameInfoWrapper(), colors.BackgroundDarkGray() }>
        @GeneralGameInfo(game, player)
      </div>
    case enums.Win:
      if *game.Winner == player.PlayerID {
        <div class={ gameInfoWrapper(), colors.BackgroundDarkGreen() }>
          @GeneralGameInfo(game, player)
        </div>
      } else {
        <div class={ gameInfoWrapper(), colors.BackgroundDarkRed() }>
          @GeneralGameInfo(game, player)
        </div>
      }
  }
}

css gameWrapper() {
  display: flex;
  flex-direction: row;
  border-radius: 4px;
  width: 100%;
  height: 100px;
  margin-bottom: 8px;
}

templ Game(game *models.Game, player *models.GamePlayer) {
  <div class={ gameWrapper() }>
    @ResultAccent(game, player)
    @GameInfo(game, player)
  </div>
}
