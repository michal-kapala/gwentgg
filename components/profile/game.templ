package profile

import (
  "fmt"
  "gwentgg/components/colors"
  "gwentgg/components/fonts"
  "gwentgg/db/models"
	"gwentgg/enums"
	"gwentgg/utils"

  tmpl "github.com/a-h/templ"
)

css resultAccentWrapper() {
  border-radius: 4px 0px 0px 4px;
  width: 6px;
}

templ ResultAccent(game *models.Game, player *models.GamePlayer) {
  switch game.Finished {
    case enums.Draw:
      <div class={ resultAccentWrapper(), colors.BackgroundBrown() }></div>
    case enums.NotStarted:
      <div class={ resultAccentWrapper(), colors.BackgroundGray() }></div>
    case enums.Win:
      if *game.Winner == player.PlayerID {
        <div class={ resultAccentWrapper(), colors.BackgroundGreen() }></div>
      } else {
        <div class={ resultAccentWrapper(), colors.BackgroundRed() }></div>
      }
  }
}

templ GameType(game *models.Game, player *models.GamePlayer) {
  switch game.Finished {
    case enums.Draw:
      <span class={ colors.HighlightBrown() }>{ game.Type.GameMode() }</span>
    case enums.NotStarted:
      <span class={ colors.HighlightGray() }>{ game.Type.GameMode() }</span>
    case enums.Win:
      if *game.Winner == player.PlayerID {
        <span class={ colors.HighlightGreen() }>{ game.Type.GameMode() }</span>
      } else {
        <span class={ colors.HighlightRed() }>{ game.Type.GameMode() }</span>
      }
  }
}

css relativeGameDateWrapper() {
  font-size: 13px;
  margin-top: 4px;
}

templ RelativeGameDate(game *models.Game) {
  <span class={ relativeGameDateWrapper() }>{ utils.RelativeTime(game.DateFinished) }</span>
}

css generalGameInfoWrapper() {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: 0px 8px;
  min-width: 80px;
}

templ GeneralGameInfo(game *models.Game, player *models.GamePlayer) {
  if game.Finished == enums.Win && *game.Winner == player.PlayerID {
    <div class={ generalGameInfoWrapper(), fonts.FontRegular(), colors.HighlightGrayVeryLight() }>
      @GameType(game, player)
      @RelativeGameDate(game)
    </div>
  } else {
    <div class={ generalGameInfoWrapper(), fonts.FontRegular(), colors.HighlightGrayLight() }>
      @GameType(game, player)
      @RelativeGameDate(game)
    </div>
  }
}

css leaderIconWrapper() {
  padding: 10px 10px;
  max-width: 80px;
  max-height: 80px;
}

templ LeaderIcon(player *models.GamePlayer) {
  <img src={ utils.MakeLeaderAssetPath(player) } class={ leaderIconWrapper() }>
}

css gg() {
  max-width: 30px;
  padding: 0px 6px;
}

css noGg() {
  max-width: 30px;
  padding: 0px 6px;
  opacity: 0.5;
}

templ GgIcon(gged bool) {
  if gged {
    <img src="/assets/gg.png" class={ gg() } alt="GG">
  } else {
    <img src="/assets/gg.png" class={ noGg() } alt="No GG">
  }
}

css coin() {
  max-width: 30px;
  padding: 0px 6px;
}

templ CoinIcon() {
  <img src="/assets/coin.png" class={ coin() } alt="Coin"> 
}

css playerDetailsWrapper() {
  display: flex;
  flex-direction: column;
  justify-content: center;
  width: 100%;
}

css playerDetailsMMR() {
  display: flex;
  justify-content: center;
  width: 100%;
  padding: 4px 0px;
}

css playerDetailsRow() {
  display: flex;
  flex-direction: row;
  justify-content: center;
  padding: 4px 0px;
}

css playerStatusText() {
  display: flex;
  align-items: center;
  font-size: 20px;
  padding: 0px 6px;
}

templ PlayerStatus(content string, won bool) {
  if won {
    <span class={ playerStatusText(), fonts.FontBold(), colors.HighlightGrayVeryLight() }>{ content }</span>
  } else {
    <span class={ playerStatusText(), fonts.FontBold(), colors.HighlightGrayLight() }>{ content }</span>
  }
}

templ PlayerDetails(game *models.Game, player *models.GamePlayer, won bool) {
  <div class={ playerDetailsWrapper() }>
    if won {
      <span class={ playerDetailsMMR(), fonts.FontBold(), colors.HighlightGrayVeryLight() }>{ utils.ToString(player.MMR) } MMR</span>
    } else {
      <span class={ playerDetailsMMR(), fonts.FontBold(), colors.HighlightGrayLight() }>{ utils.ToString(player.MMR) } MMR</span>
    }
    <div class={ playerDetailsRow() }>
      @GgIcon(player.SentGoodGame)
      if game.DidOpen(player.PlayerID) {
        @CoinIcon()
      }
      if player.Status != enums.Ok {
        switch player.Status {
          case enums.NotResponding:
            @PlayerStatus("AFK", won)
          case enums.Disconnected:
            @PlayerStatus("DC", won)
          case enums.Forfeit:
            @PlayerStatus("FF", won)
        }
      }
    </div>
  </div>
}

css roundScoresWrapper() {
  display: flex;
  flex-direction: column;
  justify-content: center;
  padding: 0px 10px;
}

css roundScoreText() {
  font-size: 20px;
  text-align: center;
}

templ RoundScore(value string, wonGame bool, wonRound bool, isOpponent bool) {
  if wonGame {
    if wonRound {
      if isOpponent {
        <span class={ roundScoreText(), fonts.FontGwent(), colors.HighlightRed() }>{ value }</span>
      } else {
        <span class={ roundScoreText(), fonts.FontGwent(), colors.HighlightGreen() }>{ value }</span>
      }
    } else {
      <span class={ roundScoreText(), fonts.FontGwent(), colors.HighlightGrayVeryLight() }>{ value }</span>
    }
  } else {
    if wonRound {
      if isOpponent {
        <span class={ roundScoreText(), fonts.FontGwent(), colors.HighlightRed() }>{ value }</span>
      } else {
        <span class={ roundScoreText(), fonts.FontGwent(), colors.HighlightGreen() }>{ value }</span>
      }
    } else {
      <span class={ roundScoreText(), fonts.FontGwent(), colors.HighlightGrayLight() }>{ value }</span>
    }
  }
}

templ RoundScores(game *models.Game, player *models.GamePlayer, won bool, scores []string, winFlags []bool, isOpponent bool) {
  <div class={ roundScoresWrapper() }>
    for idx, score := range scores {
      if uint(idx) < game.FinishedRounds {
        @RoundScore(score, won, winFlags[idx], isOpponent)
      }
    }
  </div>
}

css playerInfoWrapper() {
  display: flex;
  flex-direction: row;
  width: 100%;
}

templ PlayerInfo(game *models.Game, player *models.GamePlayer) {
  <div class={ playerInfoWrapper() }>
    @LeaderIcon(player)
    @PlayerDetails(game, player, *game.Winner == player.PlayerID)
    @RoundScores(game, player, *game.Winner == player.PlayerID, utils.SplitCsv(player.RoundScores), utils.CsvToBools(player.RoundsWon), false)
  </div>
}

css opponentInfoWrapper() {
  display: flex;
  flex-direction: row;
  justify-content: flex-end;
  width: 100%;
}

templ OpponentInfo(game *models.Game, opponent *models.GamePlayer) {
  <div class={ opponentInfoWrapper() }>
    @RoundScores(game, opponent, *game.Winner == opponent.PlayerID, utils.SplitCsv(opponent.RoundScores), utils.CsvToBools(opponent.RoundsWon), true)
    @PlayerDetails(game, opponent, *game.Winner != opponent.PlayerID)
    @LeaderIcon(opponent)
  </div>
}

css notStartedWrapper() {
  display: flex;
  align-items: center;
  width: 100%;
  padding-left: 10px;
}

templ NotStarted() {
  <span class={ notStartedWrapper(), fonts.FontRegular(), colors.HighlightGrayLight() }>The game did not start.</span>
}

css gameInfoWrapper() {
  display: flex;
  flex-direction: row;
  width: 100%;
  border-radius: 0px 4px 4px 0px;
}

templ GameInfo(game *models.Game, player *models.GamePlayer) {
  switch game.Finished {
    case enums.Draw:
      <div class={ gameInfoWrapper(), colors.BackgroundDarkBrown() }>
        @GeneralGameInfo(game, player)
        @PlayerInfo(game, player)
        @OpponentInfo(game, game.GetOpponent(player.PlayerID))
      </div>
    case enums.NotStarted:
      <div class={ gameInfoWrapper(), colors.BackgroundDarkGray() }>
        @GeneralGameInfo(game, player)
        @NotStarted()
      </div>
    case enums.Win:
      if *game.Winner == player.PlayerID {
        <div class={ gameInfoWrapper(), colors.BackgroundDarkGreen() }>
          @GeneralGameInfo(game, player)
          @PlayerInfo(game, player)
          @OpponentInfo(game, game.GetOpponent(player.PlayerID))
        </div>
      } else {
        <div class={ gameInfoWrapper(), colors.BackgroundDarkRed() }>
          @GeneralGameInfo(game, player)
          @PlayerInfo(game, player)
          @OpponentInfo(game, game.GetOpponent(player.PlayerID))
        </div>
      }
  }
}

css gameWrapper() {
  display: flex;
  flex-direction: row;
  border-radius: 4px;
  width: 100%;
  height: 100px;
  margin-bottom: 8px;
  text-decoration: none;
}

templ Game(game *models.Game, player *models.GamePlayer) {
  <a class={ gameWrapper() } href={ tmpl.SafeURL(fmt.Sprintf("/player/%s/games/%s", player.PlayerID, game.ID)) } target="_blank" rel="noopener noreferrer">
    @ResultAccent(game, player)
    @GameInfo(game, player)
  </a>
}
